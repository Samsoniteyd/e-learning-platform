// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(STUDENT)
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments Enrollment[]
  quizAttempts QuizAttempt[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  price       Float    @default(0.0)
  duration    Int      
  level       CourseLevel @default(BEGINNER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modules    Module[]
  enrollments Enrollment[]
  quizzes    Quiz[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  content   String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Quiz {
  id        String   @id @default(cuid())
  title     String
  courseId  String
  duration  Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions  Question[]
  attempts   QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id      String   @id @default(cuid())
  text    String
  options String[] 
  correctAnswer Int 
  quizId  String
  order   Int

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  total     Int
  startedAt DateTime @default(now())
  completedAt DateTime?
  answers   Json     

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  progress  Float    @default(0.0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
